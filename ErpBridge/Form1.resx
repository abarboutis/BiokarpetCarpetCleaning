<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pb_wait.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAQAAAABAAoAQAAJgAAACAgEAAAAAQA6AIAAE4BAAAoAAAAEAAAACAAAAABAAQAAAAAAIAA
        AAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAICAgADAwMAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHd3d3d3d3d3B3d3d3d3
        d3AAd3d3d3d3AAAAAAAAAAAAAAAAAAAAAAAAAAzMzMAAAAAAAMzMAAAAAAAADMAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAP//AAD//wAAAAAAAIABAADAAwAA//8AAP//
        AAD4HwAA/D8AAP5/AAD//wAA//8AAP//AAD//wAA//8AACgAAAAgAAAAQAAAAAEABAAAAAAAAAIAAAAA
        AAAAAAAAEAAAABAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD/
        /wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB3d3d3d3d3d3d3d3d3d3d3B3d3d3d3d3d3d3d3d3d3cAB3
        d3d3d3d3d3d3d3d3dwAAB3d3d3d3d3d3d3d3d3AAAAB3d3d3d3d3d3d3d3cAAAAAB3d3d3d3d3d3d3dw
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzMzMzMzMzAAAAAAAAAAADMzMzMzM
        zMAAAAAAAAAAAADMzMzMzMwAAAAAAAAAAAAADMzMzMzAAAAAAAAAAAAAAADMzMzMAAAAAAAAAAAAAAAA
        DMzMwAAAAAAAAAAAAAAAAADMzAAAAAAAAAAAAAAAAAAADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////
        /////////////////////////////wAAAACAAAABwAAAA+AAAAfwAAAP+AAAH////////////wAA//+A
        Af//wAP//+AH///wD///+B////w////+f////////////////////////////////////////////w==
</value>
  </data>
</root>